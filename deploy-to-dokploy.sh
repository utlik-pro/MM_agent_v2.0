#!/bin/bash

echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π MM Agent v2.0 –Ω–∞ Dokploy"
echo "================================================="

# Check if we're in the right directory
if [ ! -f "agent.py" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: agent.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

# Check if changes are committed
if [ -n "$(git status --porcelain)" ]; then
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
    echo "üìã –ù–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    git status --porcelain
    echo ""
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω"
        exit 1
    fi
fi

# Get current commit hash
COMMIT_HASH=$(git rev-parse --short HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=%B)

echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–ª–æ–µ:"
echo "  üîñ Commit: $COMMIT_HASH"
echo "  üìù Message: $(echo "$COMMIT_MESSAGE" | head -1)"
echo "  üåø Branch: $(git branch --show-current)"
echo ""

# Check environment variables in .env
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
if [ ! -f ".env" ]; then
    echo "‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "üìã –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:"
    echo "   LIVEKIT_API_KEY=your_key"
    echo "   LIVEKIT_API_SECRET=your_secret"
    echo "   LIVEKIT_URL=wss://your-project.livekit.cloud"
    exit 1
fi

# Source .env and check variables
source .env
if [ -z "$LIVEKIT_API_KEY" ] || [ -z "$LIVEKIT_API_SECRET" ] || [ -z "$LIVEKIT_URL" ]; then
    echo "‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env!"
    exit 1
fi

echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
echo "  üîó LiveKit URL: $LIVEKIT_URL"
echo "  üîë API Key: ${LIVEKIT_API_KEY:0:8}..."

# Check if Docker is available
if ! command -v docker &> /dev/null; then
    echo "‚ö†Ô∏è  Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
else
    echo ""
    echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–±–æ—Ä–∫–∏..."
    
    # Check if Docker daemon is running
    if ! docker info > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
        echo "‚ÑπÔ∏è  –°–±–æ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ Dokploy —Å–µ—Ä–≤–µ—Ä–µ"
    else
        # Build Docker image locally to verify
        echo "üî® –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–∞..."
        if docker build -t mm-agent-test . > /dev/null 2>&1; then
            echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ"
            docker rmi mm-agent-test > /dev/null 2>&1
        else
            echo "‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Dokploy"
            echo "‚ÑπÔ∏è  –°–±–æ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ Dokploy —Å–µ—Ä–≤–µ—Ä–µ —Å —á–∏—Å—Ç—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º"
        fi
    fi
fi

echo ""
echo "üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é..."

# Create deployment info file
cat > DEPLOYMENT_INFO.md << EOF
# Deployment Info

**Commit**: $COMMIT_HASH
**Date**: $(date)
**Branch**: $(git branch --show-current)

## Changes in this deployment:
$COMMIT_MESSAGE

## Configuration:
- LiveKit URL: $LIVEKIT_URL
- API Key: ${LIVEKIT_API_KEY:0:8}...

## Services:
- Agent: Python LiveKit Agent with Google AI
- Frontend: React Widget (already on Vercel)

## Post-deployment checklist:
- [ ] Check Dokploy logs for successful startup
- [ ] Test voice widget connection
- [ ] Verify agent responds to voice input
EOF

echo "‚úÖ Deployment info —Å–æ–∑–¥–∞–Ω"

echo ""
echo "üöÄ –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ Dokploy dashboard: https://dokploy.utlik.co"
echo "2. üîÑ –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ MM_agent_v2.0"
echo "3. üöÄ –ù–∞–∂–º–∏—Ç–µ 'Redeploy' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
echo "4. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è –≤ Dokploy"
echo "5. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑: https://mm-agent-v2-0.vercel.app"
echo ""

# Option to open Dokploy dashboard
read -p "üåê –û—Ç–∫—Ä—ã—Ç—å Dokploy dashboard? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üåê –û—Ç–∫—Ä—ã–≤–∞—é Dokploy dashboard..."
    if command -v open &> /dev/null; then
        open "https://dokploy.utlik.co"
    elif command -v xdg-open &> /dev/null; then
        xdg-open "https://dokploy.utlik.co"
    else
        echo "üìã –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: https://dokploy.utlik.co"
    fi
fi

echo ""
echo "üéâ –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo "üì± Frontend URL: https://mm-agent-v2-0.vercel.app"
echo "ü§ñ Agent –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ redeploy –≤ Dokploy"
echo ""
echo "‚ö†Ô∏è  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ voice widget!" 