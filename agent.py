from dotenv import load_dotenv
from livekit import agents
from livekit.agents import AgentSession, Agent, RoomInputOptions
from livekit.plugins import (noise_cancellation,)
from livekit.plugins import google

from prompts import AGENT_INSTRUCTIONS, SESSION_INSTRUCTIONS
import os
from aiohttp import web
import jwt
import time

load_dotenv()

@web.middleware
async def cors_middleware(request, handler):
    if request.method == 'OPTIONS':
        # Preflight CORS request
        resp = web.Response()
    else:
        resp = await handler(request)
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    resp.headers['Access-Control-Allow-Origin'] = '*'
    resp.headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'
    resp.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With'
    resp.headers['Access-Control-Allow-Credentials'] = 'false'  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ false –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è iframe
    resp.headers['X-Frame-Options'] = 'ALLOWALL'
    resp.headers['Content-Security-Policy'] = "frame-ancestors *"
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    if request.path == '/get-token':
        resp.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        resp.headers['Pragma'] = 'no-cache'
        resp.headers['Expires'] = '0'
    
    return resp

API_KEY = os.environ["LIVEKIT_API_KEY"]
API_SECRET = os.environ["LIVEKIT_API_SECRET"]
WS_URL = os.environ["LIVEKIT_URL"]

async def get_token(request):
    try:
        data = await request.json()
        identity = data.get("identity", f"user-{int(time.time())}")
        room = data.get("room", f"room-{int(time.time())}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not identity or not room:
            return web.json_response(
                {"error": "identity –∏ room –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, 
                status=400
            )
        
        print(f"üé´ Creating token for user '{identity}' in room '{room}'")
        
        now = int(time.time())
        ttl = 60 * 60  # 1 —á–∞—Å

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è LiveKit
        payload = {
            "iss": API_KEY,
            "sub": identity,
            "room": room,
            "exp": now + ttl,
            "iat": now,
            "nbf": now,
            "video": {
                "room": room,
                "roomJoin": True,
                "canPublish": True,
                "canSubscribe": True,
            },
        }
        
        token = jwt.encode(payload, API_SECRET, algorithm="HS256")
        
        print(f"‚úÖ Token created successfully for room: {room}")
        
        return web.json_response({
            "token": token, 
            "wsUrl": WS_URL,
            "identity": identity,
            "room": room,
            "agent_dispatch": "automatic"  # Indicate that agent will auto-dispatch
        })
        
    except Exception as e:
        print(f"‚ùå Error creating token: {str(e)}")
        return web.json_response(
            {"error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}"}, 
            status=500
        )

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return web.json_response({"status": "ok", "service": "livekit-agent"})

async def entrypoint(ctx):
    print(f"üè† Agent connecting to room: {ctx.room.name}")
    print(f"üÜî Room metadata: {ctx.room.metadata}")
    print(f"üë• Current participants: {len(ctx.room.remote_participants)}")
    
    # Validate room name format for debugging
    if ctx.room.name.startswith('session-'):
        print(f"‚úÖ Detected user session room: {ctx.room.name}")
    elif ctx.room.name.startswith('room-'):
        print(f"‚úÖ Detected auto-generated room: {ctx.room.name}")
    else:
        print(f"‚ÑπÔ∏è  Custom room name: {ctx.room.name}")
    
    session = AgentSession()

    # Create assistant instance for this specific room
    assistant = Assistant()
    
    await session.start(
        room=ctx.room,
        agent=assistant,
        room_input_options=RoomInputOptions(
            # LiveKit Cloud enhanced noise cancellation
            # - If self-hosting, omit this parameter
            # - For telephony applications, use `BVCTelephony` for best results
            video_enabled=True,
            noise_cancellation=noise_cancellation.BVC(),
        ),
    )

    print(f"‚úÖ Agent successfully joined room: {ctx.room.name}")
    
    # Set up room event monitoring
    def on_participant_connected(participant):
        print(f"üë§ New participant joined room {ctx.room.name}: {participant.identity}")
        
    def on_participant_disconnected(participant):
        print(f"üëã Participant left room {ctx.room.name}: {participant.identity}")
    
    # Subscribe to room events
    ctx.room.on("participant_connected", on_participant_connected)
    ctx.room.on("participant_disconnected", on_participant_disconnected)
    
    await ctx.connect()

    # Personalized greeting based on room
    room_specific_instructions = f"""
{SESSION_INSTRUCTIONS}

–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: {ctx.room.name}
–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ - –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ –º–æ–∂–µ—Ç —Å–ª—ã—à–∞—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä.
"""

    print(f"ü§ñ Starting conversation in room: {ctx.room.name}")
    
    await session.generate_reply(
        instructions=SESSION_INSTRUCTIONS,
    )

class Assistant(Agent):
    def __init__(self):
        super().__init__(
            instructions=AGENT_INSTRUCTIONS,
            llm=google.beta.realtime.RealtimeModel(voice="Aoede", temperature=0.0)
        )
        self.current_room = None
        
    async def on_room_joined(self, room):
        """Called when agent joins a room"""
        self.current_room = room.name
        print(f"üéâ Assistant successfully joined room: {room.name}")
        print(f"üìä Room info - Participants: {len(room.remote_participants)}")
        
        # Set room-specific context
        if hasattr(room, 'metadata') and room.metadata:
            print(f"üìã Room metadata: {room.metadata}")
            
    async def on_participant_connected(self, participant):
        """Called when a participant connects to the room"""
        print(f"üë§ Participant connected: {participant.identity} to room: {self.current_room}")
        
    async def on_participant_disconnected(self, participant):
        """Called when a participant disconnects from the room"""
        print(f"üëã Participant disconnected: {participant.identity} from room: {self.current_room}")
        
    def get_room_context(self):
        """Get current room context for responses"""
        return f"–¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞: {self.current_room}" if self.current_room else "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "http":
        # HTTP —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        app = web.Application(middlewares=[cors_middleware])
        app.router.add_post('/api/token', get_token)
        app.router.add_get('/health', health_check)
        
        print("üöÄ LiveKit Agent HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"üîó URL: http://0.0.0.0:8765")
        print(f"üéØ LiveKit URL: {WS_URL}")
        print("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        print("  ‚Ä¢ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º")
        
        web.run_app(app, port=8765, host='0.0.0.0')
    else:
        # –ê–≥–µ–Ω—Ç —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Dokploy)
        print("üöÄ LiveKit Agent –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"üéØ LiveKit URL: {WS_URL}")
        print("üè† –ì–æ—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã:")
        print("  ‚Ä¢ session-* (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        print("  ‚Ä¢ room-* (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã)")
        print("  ‚Ä¢ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç")
        print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –∫–æ–º–Ω–∞—Ç–∞–º...")
        
        agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))

